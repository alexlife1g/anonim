import asyncio
import aiohttp
import logging
import csv
import os
from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.types import InputFile
from aiogram.types import FSInputFile

BOT_TOKEN = "7304557291:AAFaKrQLPfbOhfewiwKSKVDtk84Klj1smp8"
ADMIN_ID = 639331153
CSV_FILE = "data.csv"

# --- –°—Ç–∞–Ω –∞–Ω–∫–µ—Ç–∏ ---
class Form(StatesGroup):
    gender = State()
    age = State()

# --- –î–∞–Ω—ñ —á–∞—Ç—É ---
waiting_users: list[int] = []
active_chats: dict[int, int] = {}
last_messages: dict[int, int] = {}  # user_id -> message_id

# --- CSV ---
def is_user_registered(user_id: int) -> bool:
    if not os.path.isfile(CSV_FILE):
        return False
    with open(CSV_FILE, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        if not reader.fieldnames or "user_id" not in reader.fieldnames:
            return False
        for row in reader:
            if str(user_id) == row["user_id"]:
                return True
    return False

def save_user_data(user_id: int, username: str, gender: str, age: int):
    file_exists = os.path.isfile(CSV_FILE)
    if not file_exists:
        with open(CSV_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["user_id", "username", "gender", "age"])

    existing_ids = set()
    if file_exists:
        with open(CSV_FILE, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f)
            for row in reader:
                existing_ids.add(int(row["user_id"]))

    if user_id in existing_ids:
        return

    with open(CSV_FILE, "a", newline="", encoding="utf-8") as f:
        writer = csv.writer(f)
        writer.writerow([user_id, username or "", gender, age])

# --- –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è ---
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–Ω–æ–ø–∫–∏ —á–∞—Ç—É ---
chat_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="üîÑ –°–ª–µ–¥—É—é—â–∏–π", callback_data="next_chat"),
            InlineKeyboardButton(text="‚õî –°—Ç–æ–ø", callback_data="stop_chat")
        ]
    ]
)

search_stop_kb = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="‚õî –°—Ç–æ–ø", callback_data="stop_chat")]
    ]
)

# --- –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π —á–∞—Ç ---
async def send_chat_found(user_id: int):
    msg = await bot.send_message(user_id, "üîó –ù–∞–π–¥–µ–Ω —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫! –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ.", reply_markup=chat_kb)
    last_messages[user_id] = msg.message_id

# --- –ü–æ—à—É–∫ –Ω–æ–≤–æ–≥–æ —Å–ø—ñ–≤—Ä–æ–∑–º–æ–≤–Ω–∏–∫–∞ ---
async def search_new_chat(user_id: int):
    if user_id in active_chats:
        await bot.send_message(user_id, "‚ÑπÔ∏è –í—ã —É–∂–µ –≤ —á–∞—Ç–µ.")
        return

    if user_id in waiting_users:
        await bot.send_message(user_id, "üîé –ü–æ–∏—Å–∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω...", reply_markup=search_stop_kb)
        return

    waiting_users.append(user_id)
    msg = await bot.send_message(user_id, "üîé –ò—â–µ–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...", reply_markup=search_stop_kb)
    last_messages[user_id] = msg.message_id

    for other_id in waiting_users:
        if other_id != user_id:
            waiting_users.remove(user_id)
            waiting_users.remove(other_id)
            active_chats[user_id] = other_id
            active_chats[other_id] = user_id
            await send_chat_found(user_id)
            await send_chat_found(other_id)
            return

# --- Callback –∫–Ω–æ–ø–∫–∞ "–ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ" ---
@dp.callback_query(lambda c: c.data == "search_new")
async def search_new_callback(callback: CallbackQuery):
    await callback.answer()
    await search_new_chat(callback.from_user.id)

# --- –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —á–∞—Ç—É —Ç–∞ –ø–æ—à—É–∫—É ---
async def end_chat(user_id: int, action: str = "stop"):
    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É –∞–∫—Ç–∏–≤–Ω–æ–º—É —á–∞—Ç—ñ
    if user_id in active_chats:
        partner_id = active_chats.pop(user_id)
        active_chats.pop(partner_id, None)

        for uid in (user_id, partner_id):
            if uid in last_messages:
                try:
                    await bot.edit_message_reply_markup(chat_id=uid, message_id=last_messages[uid], reply_markup=None)
                except:
                    pass
                last_messages.pop(uid, None)

        new_search_kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="üîÑ –ù–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ", callback_data="search_new")]
            ]
        )

        if action == "stop":
            await bot.send_message(user_id, "‚ùå –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç.")
            await bot.send_message(partner_id, "‚ö†Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=new_search_kb)
        elif action == "next":
            await bot.send_message(user_id, "‚ùå –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ —á–∞—Ç. –ò—â–µ–º –Ω–æ–≤–æ–≥–æ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")
            await bot.send_message(partner_id, "‚ö†Ô∏è –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.", reply_markup=new_search_kb)

        if action == "next" and user_id not in waiting_users:
            waiting_users.append(user_id)
            await search_new_chat(user_id)

    # –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É —á–µ—Ä–∑—ñ –ø–æ—à—É–∫—É
    if user_id in waiting_users:
        waiting_users.remove(user_id)
        if action == "stop":
            await bot.send_message(user_id, "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.")

# --- /start ---
@dp.message(Command("start"))
async def start_cmd(message: Message, state: FSMContext):
    if is_user_registered(message.from_user.id):
        await message.answer("‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\n–ù–∞–ø–∏—à–∏—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return

    gender_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–ü–∞—Ä–µ–Ω—å", callback_data="gender_paren"),
                InlineKeyboardButton(text="–î–µ–≤—É—à–∫–∞", callback_data="gender_devushka")
            ]
        ]
    )
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º.\n\n–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:", reply_markup=gender_kb)
    await state.set_state(Form.gender)

# --- –û–±—Ä–æ–±–∫–∞ –≥–µ–Ω–¥–µ—Ä—É ---
@dp.callback_query(Form.gender)
async def process_gender_callback(callback: CallbackQuery, state: FSMContext):
    gender = None
    if callback.data == "gender_paren":
        gender = "–ü–∞—Ä–µ–Ω—å"
    elif callback.data == "gender_devushka":
        gender = "–î–µ–≤—É—à–∫–∞"

    if not gender:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª –∫–Ω–æ–ø–∫–æ–π.")
        return

    await state.update_data(gender=gender)
    await callback.message.edit_text(f"‚úÖ –í—ã –≤—ã–±—Ä–∞–ª–∏: {gender}\n–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –≤–æ–∑—Ä–∞—Å—Ç:")
    await state.set_state(Form.age)
    await callback.answer()

# --- –í–≤–µ–¥–µ–Ω–Ω—è –≤—ñ–∫—É ---
@dp.message(Form.age)
async def process_age(message: Message, state: FSMContext):
    try:
        age = int(message.text.strip())
        if not (10 <= age <= 120):
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (10-120).")
        return

    data = await state.get_data()
    gender = data.get("gender")
    user_id = message.from_user.id
    username = message.from_user.username

    save_user_data(user_id, username, gender, age)

    await bot.send_message(
        ADMIN_ID,
        f"üë§ <b>–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á:</b>\n"
        f"üÜî ID: <code>{user_id}</code>\n"
        f"üìõ Username: @{username or '–Ω–µ–º–∞—î'}\n"
        f"üë´ –°—Ç–∞—Ç—å: {gender}\n"
        f"üéÇ –í—ñ–∫: {age}"
    )

    await message.answer("‚úÖ –°–ø–∞—Å–∏–±–æ! –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n–ù–∞–ø–∏—à–∏—Ç–µ /search, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    await state.clear()

# --- /search ---
@dp.message(Command("search"))
async def search_cmd(message: Message):
    await search_new_chat(message.from_user.id)

# --- /stop ---
@dp.message(Command("stop"))
async def stop_cmd(message: Message):
    await end_chat(message.from_user.id, action="stop")

# --- /next ---
@dp.message(Command("next"))
async def next_cmd(message: Message):
    await end_chat(message.from_user.id, action="next")

# --- Callback –∫–Ω–æ–ø–∫–∏ ---
@dp.callback_query(lambda c: c.data == "next_chat")
async def next_callback(callback: CallbackQuery):
    await end_chat(callback.from_user.id, action="next")
    await callback.answer()

@dp.callback_query(lambda c: c.data == "stop_chat")
async def stop_callback(callback: CallbackQuery):
    await end_chat(callback.from_user.id, action="stop")
    await callback.answer()

# --- –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–∞—Ç—É ---

# --- –ê–¥–º—ñ–Ω—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏ --- –ø–æ–≤–∏–Ω–Ω—ñ –±—É—Ç–∏ –ø–µ—Ä—à–∏–º–∏
@dp.message(Command("get_csv"))
async def get_csv_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º.")
        return

    if not os.path.isfile(CSV_FILE):
        await message.answer("‚ùå –§–∞–π–ª CSV —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        return

    csv_file = FSInputFile(CSV_FILE)
    await message.answer_document(csv_file, caption="üìÅ –û—Å—å —Ñ–∞–π–ª CSV –∑ —É—Å—ñ–º–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º–∏")

@dp.message(Command("stats"))
async def stats_cmd(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –í–∏ –Ω–µ —î –∞–¥–º—ñ–Ω–æ–º.")
        return

    if not os.path.isfile(CSV_FILE):
        await message.answer("‚ùå –§–∞–π–ª CSV —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π.")
        return

    with open(CSV_FILE, "r", encoding="utf-8") as f:
        count = sum(1 for _ in f) - 1  # –≤—ñ–¥–Ω—ñ–º–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
    await message.answer(f"üë• –ó–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤: {count}")

@dp.message(F.text)
async def message_handler(message: Message):
    # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ –∫–æ–º–∞–Ω–¥–∏
    if message.from_user.id == ADMIN_ID and message.text.startswith(("/", "!")):
        return

    user_id = message.from_user.id
    if user_id in active_chats:
        partner_id = active_chats[user_id]
        try:
            await bot.send_message(partner_id, message.text or "")
        except:
            await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
    else:
        await message.answer("‚ÑπÔ∏è –í—ã –Ω–µ –≤ —á–∞—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ /search —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")




# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    try:
        asyncio.run(dp.start_polling(bot))
    except (KeyboardInterrupt, SystemExit):
        print("–ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ")

